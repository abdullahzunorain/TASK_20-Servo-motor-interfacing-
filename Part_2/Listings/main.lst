C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 16:16:12 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          
   2          /*
   3          
   4          Task Title: 
   5                      {Controlling SG90 Servo Motor with 8051 Microcontroller Using PWM}
   6          Explanation:
   7                    The code generates a PWM signal using Timer 1 in Mode 2 of the 8051 microcontroller to control an SG9
             -0 servo motor,
   8                    where button inputs adjust the angle, and the pulse width is varied accordingly to set the servo's po
             -sition between 0° and 180°.
   9          
  10          
  11          
  12          To control an SG90 servo motor with an 8051 microcontroller (like the STC89C52RC) using PWM signals, you n
             -eed to generate a signal with a 50 Hz frequency. 
  13          The SG90 requires a PWM signal where the pulse width ranges from approximately 1 ms (for 0 degrees) to 2 m
             -s (for 180 degrees), with a total period of 20 ms.
  14          
  15          Requirements:
  16          Pulse width for 0°: 1 ms (high time)
  17          Pulse width for 90°: 1.5 ms (high time)
  18          Pulse width for 180°: 2 ms (high time)
  19          Total period: 20 ms (50 Hz)
  20          Approach:
  21          Using Timer 1 in Mode 2 (8-bit auto-reload mode) to generate the required delays.
  22          Manually adjusting the duty cycle for 0°, 90°, and 180° within a while loop first, and then using interrup
             -ts.
  23          
  24          Code Implementation (Manual Method with Timer and Delay):
  25          You can start with a simple method using a while loop to manually control the pulse widths for the servo.
  26          
  27          
  28          Explanation:
  29          PWM Signal: We generate a PWM signal where the high pulse width corresponds to the servo angle, and the to
             -tal period is 20 ms.
  30          0° corresponds to a 1 ms pulse width (1000 µs).
  31          90° corresponds to a 1.5 ms pulse width (1500 µs).
  32          180° corresponds to a 2 ms pulse width (2000 µs).
  33          Timer 1 is used to create small delays for the high time of the PWM signal.
  34          Buttons are used to adjust the angle. The angle is incremented or decremented, and the corresponding pulse
             - width is calculated and sent to the servo.
  35          
  36          */
  37          
  38          
  39          #include <reg51.h>
  40          
  41          sbit output = P1^0;  // Output to the servo motor control pin
  42          sbit btn = P3^0;     // Button to increase the angle
  43          sbit btn1 = P3^1;    // Button to decrease the angle
  44          
  45          void delay_ms(unsigned int msec); // Delay function
  46          void timer_us(unsigned int usec); // Microsecond-level delay using Timer1
  47          
C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 16:16:12 PAGE 2   

  48          int angle_to_pulse_width(int angle);
  49          
  50          void main()
  51          {
  52   1          int angle = 90;  // Start at 90 degrees
  53   1          int pulse_width;
  54   1          
  55   1          // Initial setup
  56   1          TMOD = 0x20;   // Timer1 Mode2 (8-bit auto-reload)
  57   1          TH1 = -23;     // Timer for 50 us delay (adjust for your clock)
  58   1          
  59   1          while(1)
  60   1          {
  61   2              // Adjust angle with buttons
  62   2              if (btn == 0) {
  63   3                  if (angle < 180) angle += 1;
  64   3                  delay_ms(200);  // Debouncing delay
  65   3              }
  66   2              if (btn1 == 0) {
  67   3                  if (angle > 0) angle -= 1;
  68   3                  delay_ms(200);  // Debouncing delay
  69   3              }
  70   2      
  71   2              // Convert angle to pulse width
  72   2              pulse_width = angle_to_pulse_width(angle);
  73   2      
  74   2              // Send the PWM signal to the servo
  75   2              output = 1;               // Start the pulse
  76   2              timer_us(pulse_width);     // High for pulse width
  77   2              output = 0;               // End the pulse
  78   2              delay_ms(20 - pulse_width / 1000); // Low for the rest of 20 ms
  79   2          }
  80   1      }
  81          
  82          void delay_ms(unsigned int msec)  // Function for millisecond delay
  83          {
  84   1          unsigned int i, j;
  85   1          for(i = 0; i < msec; i++)
  86   1              for(j = 0; j < 1275; j++); // 1 ms delay
  87   1      }
  88          
  89          void timer_us(unsigned int usec)  // Function for microsecond delay using Timer1
  90          {
  91   1          int i;
  92   1          for(i = 0; i < usec / 50; i++)  // Assuming Timer1 gives a 50 us delay
  93   1          {
  94   2              TR1 = 1;        // Start Timer1
  95   2              while (TF1 == 0); // Wait for Timer1 overflow
  96   2              TF1 = 0;        // Clear overflow flag
  97   2              TR1 = 0;        // Stop Timer1
  98   2          }
  99   1      }
 100          
 101          // Function to convert angle to pulse width (in microseconds)
 102          int angle_to_pulse_width(int angle)
 103          {
 104   1          // Linear conversion of angle (0-180) to pulse width (1000-2000 microseconds)
 105   1          return (1000 + ((angle * 1000) / 180));  // Map angle to 1000-2000 us
 106   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.60.7.0   MAIN                                                              09/23/2024 16:16:12 PAGE 3   

   CODE SIZE        =    211    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
